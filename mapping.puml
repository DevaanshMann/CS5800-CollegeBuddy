@startuml
skinparam packageStyle rectangle
skinparam stereotypeCBackgroundColor #ECECEC
skinparam stereotypeCFontColor #333333

package "com.collegebuddy.config" {
  class SecurityConfig <<configuration>> {
    +passwordEncoder(): PasswordEncoder
    +jwtAuthFilter(jwtService: JwtService): JwtAuthFilter
    +filterChain(http: HttpSecurity, jwtAuthFilter: JwtAuthFilter): SecurityFilterChain
  }
}

package "com.collegebuddy.controller" {
  class AuthController <<controller>> {
    - users: UserRepository
    - schools: SchoolRepository
    - encoder: PasswordEncoder
    - jwt: JwtService
    + signup(r: SignupReq): Map<String,String>
    + login(r: LoginReq): Map<String,String>
  }

  class SignupReq <<record>> {
    + email: String
    + password: String
  }
  class LoginReq <<record>> {
    + email: String
    + password: String
  }
}

package "com.collegebuddy.security" {
  class JwtService <<service>> {
    + issueAccess(userId: Long, schoolId: Long): String
    + parse(token: String): Jws<Claims>
  }

  class JwtAuthFilter <<filter>> {
    - jwt: JwtService
    + doFilterInternal(req, res, chain): void
  }

  class SecurityFilterChain
  class UsernamePasswordAuthenticationFilter
  class HttpSecurity
}

package "com.collegebuddy.repo" {
  interface UserRepository <<repository>> {
    + existsByEmail(email: String): boolean
    + findByEmail(email: String): Optional<User>
  }
  interface SchoolRepository <<repository>> {
    + findByDomain(domain: String): Optional<School>
  }
  interface JpaRepository<T,ID>
  UserRepository -up-|> JpaRepository
  SchoolRepository -up-|> JpaRepository
}

package "com.collegebuddy.domain" {
  class User <<entity>> {
    + id: Long
    + email: String
    + passwordHash: String
    + emailVerified: boolean
    + school: School
  }

  class School <<entity>> {
    + id: Long
    + domain: String
    + name: String
  }
}

package "com.collegebuddy.util" {
  class CampusGuard <<utility>> {
    + assertSameCampus(requesterSchoolId: Long, resourceSchoolId: Long): void
  }
}

' ===== Relationships =====
AuthController --> UserRepository : uses
AuthController --> SchoolRepository : uses
AuthController --> PasswordEncoder : uses
AuthController --> JwtService : uses

User "many" --> "1" School : belongs to

JwtAuthFilter --> JwtService : uses
SecurityConfig --> JwtAuthFilter : @Bean
SecurityConfig --> PasswordEncoder : @Bean
SecurityConfig --> SecurityFilterChain : @Bean
SecurityFilterChain ..> JwtAuthFilter : adds before
SecurityFilterChain ..> UsernamePasswordAuthenticationFilter : ordering

CampusGuard ..> User : compares school.id
CampusGuard ..> School

@enduml
